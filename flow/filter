#!/bin/bash

################## Please Config Me First ##################

# bcompare / vimdiff / meld / other ?
DIFFAPP=vimdiff
#DIFFAPP=~/buildarea/rootfs.diy/usr/bin/bcompare

# Search Field
# Generally:
#	START_TAG=SDK base on which kernel TAG
#	END_TAG=
#START_TAG=v5.3-rc8
#START_TAG=v5.15-rc7
START_TAG=v6.0-rc7
END_TAG=

# Patches DIR
# TDIR
# ├── patch will be droped   -> patches.drop
# └── patch will be applied  -> patches.todo
# Get from cmd line by default
TDIR=$1

######################## Config End ########################


WORK_DIR=$(dirname $(readlink -f $0))
. $WORK_DIR/../utils

create_dir patches.drop/same
create_dir patches.drop/revert
create_dir patches.todo

for f in `ls $TDIR/*.patch`
do
    echo
    echo_c SC_CYAN "[Process]: $f"

    subject=`cat $f | grep "^Subject: \[" | awk '/^Subject: \[PATCH [0-9]+\/[0-9]+\]/ { match($0, /\[PATCH ([0-9]+)\/([0-9]+)\] (.*)/, arr); print arr[3] }'`
    echo_c SC_BLUE "[Find Subject]: $subject"
    escaped_subject=$(echo $subject | sed 's/[][\\.*^$]/\\&/g')
    commits=$(git log --no-merges --grep="^${escaped_subject}" $START_TAG..$END_TAG | \
	    grep '^commit\s\w*' | cut -d ' ' -f2)
    
    if [ "X$commits" != "X" ]; then
	echo_c SC_BLUE "[Found Commits]: $commits"
    else
	mv $f patches.todo
	continue
    fi

    # Maybe we can find more than one commit, deal with every one
    # 先遍历一遍, 看看git patch-id是不是一样
    for c in $commits
    do
	mkdir patches.temp/$c
	patchname=`git format-patch -1 $c -o patches.temp/$c`

	patchidsrc=`cat $f | git patch-id | cut -d ' ' -f1`
	patchiddest=`cat $patchname | git patch-id | cut -d ' ' -f1`
	if [ "X$patchidsrc" = "X$patchiddest" ]; then
	    echo_c SC_BLUE "patch-id are:"
	    echo_c SC_BLUE "    $patchidsrc"
	    echo_c SC_BLUE "    $patchiddest"
	    mv $f patches.drop/same/
	    BN=$(basename $f)
	    mv $patchname patches.drop/same/$BN.same
	    break
	fi
    done

    # 如果patch-id相同, 不继续比较了, 处理下一个文件
    if [ ! -f $f ]; then
	rm -rf patches.temp/*
	continue
    fi

    for c in $commits
    do
	echo_c SC_GREEN "Please compare this patch with commit [$c]."
	patchname=`ls patches.temp/$c/*.patch`
	$DIFFAPP $f $patchname

	read -p 'Are these two patches the same?? [y|N]: ' choice
	echo "choice = $choice"
	if [ "X$choice" = "Xy" ]; then
	    mv $f patches.drop/same/
	    BN=$(basename $f)
	    mv $patchname patches.drop/same/$BN.same
	    break
	fi
    done

    if [ -f $f ]; then
	mv $f patches.todo
    fi
    rm -rf patches.temp/*
done

